name: Accounts Dev

on:
  push:
    branches: [dev]
    paths: 'src/accounts/**'

jobs:
  test:
    name: Test with Jest
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'src/accounts'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '12'
          cache: 'npm'
          cache-dependency-path: src/accounts/package-lock.json

      - name: Install dependencies with npm
        run: npm install

      - name: Run tests and generate coverage
        run: npm run test:ci

      - name: Create coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: |
            home/runner/work/kwetter/kwetter/src/accounts/coverage/lcov.info
            home/runner/work/kwetter/kwetter/src/accounts/coverage/test-reporter.xml

      - name: Tests âœ…
        if: ${{ success() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "tests",
            "state": "success",
            "description": "Tests passed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

      - name: Tests ðŸš¨
        if: ${{ failure() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "tests",
            "state": "failure",
            "description": "Tests failed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

  sonar:
    name: Scan With Sonarqube
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage

      - name: Run Sonarqube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: src/accounts
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_ACCOUNTS }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    name: Build Docker image and push to DockerHub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: src/accounts

          tags: vjv2143/kwetter.accounts:latest

          push: ${{ github.ref == 'refs/heads/dev' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
