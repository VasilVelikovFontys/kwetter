name: Main

on:
  push:
    paths: 'src/**'

jobs:
  setup:
    name: Get Updated Paths
    runs-on: ubuntu-latest
    outputs:
      updated-paths: ${{ steps.generate-matrix.outputs.paths }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Generate Matrix
        id: generate-matrix
        run: |
          pathsArray=()

          for updatedFile in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          do
            if [[ $updatedFile == src\/* ]]
              then
              temporaryString=${updatedFile#*/}
              path=${temporaryString%/*}
              pathsArray+=(\"$path\")
            fi
          done

          separatedPaths=$(IFS=', '; echo "${pathsArray[*]}")

          echo {\"paths\":[$separatedPaths]}
          echo ::set-output name=paths::[$separatedPaths]

  test:
    name: Test with Jest
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
    defaults:
      run:
        working-directory: 'src/${{ matrix.path }}'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '12'
          cache: 'npm'
          cache-dependency-path: src/${{ matrix.path }}/package-lock.json

      - name: Install dependencies with npm
        run: npm install

      - name: Run tests and generate coverage
        run: npm run test:ci

      - name: Create coverage artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: |
            src/${{ matrix.path }}/coverage/lcov.info
            src/${{ matrix.path }}/coverage/test-reporter.xml

      - name: Save successful test result âœ…
        if: ${{ success() }}
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/src/test-results/results.txt
          contents: |
            ${{ matrix.path }}:true,
          write-mode: append

      - name: Save failed test result ðŸš¨
        if: ${{ failure() }}
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/src/test-results/results.txt
          contents: |
            ${{ matrix.path }}:false,
          write-mode: append

      - name: Create test results artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: src/test-results

  sonar:
    name: Scan With Sonarqube
    runs-on: ubuntu-latest
    needs: [ setup, test]
    strategy:
      matrix:
        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: ${{ github.workspace }}/src/${{ matrix.path }}/coverage

      - name: Download test results artifact
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: ${{ github.workspace }}/src/test-results

      - name: Read test results
        id: test-results
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ github.workspace }}/src/test-results/results.txt

      - name: Check test result
        uses: actions/github-script@v6
        env:
          TEST_RESULTS: ${{ steps.test-results.outputs.content }}
          PATH: ${{ matrix.path }}
        with:
          script: |
            const { TEST_RESULTS, PATH } = process.env
            const testResults = TEST_RESULTS.split(',')
            testResults.pop()

            console.log(testResults)

            const pathTest = testResults.find(result => result.substring(0, result.indexOf(':')) === PATH)

            const pathTestValue = pathTest.substring(pathTest.indexOf(':') + 1, pathTest.length + 1)

            if (pathTestValue === 'true') {
              core.setFailed(`${PATH} tests have failed ðŸš¨`)
            }

      - name: Get Sonar Token Name
        if: ${{ success() }}
        id: token
        uses: ASzc/change-string-case-action@v2
        with:
          string: SONAR_TOKEN_${{ matrix.path }}

      - name: Run Sonarqube scan
        if: ${{ success() }}
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: src/${{ matrix.path }}
          args: >
            -Dsonar.projectKey=kwetter-${{ matrix.path }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=src/**/*.test.js
            -Dsonar.testExecutionReportPaths=coverage/test-reporter.xml
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets[steps.token.outputs.uppercase] }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Check Sonarqube quality gate
        if: ${{ github.ref == 'refs/heads/master' && success() }}
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        with:
          scanMetadataReportFile: ${{ github.workspace }}/src/${{ matrix.path }}/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets[steps.token.outputs.uppercase] }}

      - name: Save successful quality gate result âœ…
        if: ${{ github.ref == 'refs/heads/master' && success() }}
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/src/quality-gate-results/results.txt
          contents: |
            ${{ matrix.path }}:true,
          write-mode: append

      - name: Save failed quality gate result ðŸš¨
        if: ${{ github.ref == 'refs/heads/master' && failure() }}
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/src/quality-gate-results/results.txt
          contents: |
            ${{ matrix.path }}:false,
          write-mode: append

      - name: Create quality gate results artifact
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v2
        with:
          name: quality-gate-results
          path: src/quality-gate-results

#  build-docker-hub:
#    name: Build Docker image and push to DockerHub
#    if: ${{ github.ref == 'refs/heads/dev' }}
#    runs-on: ubuntu-latest
#    needs: [ setup, test ]
#    strategy:
#      matrix:
#        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build image and push to Docker Hub
#        uses: docker/build-push-action@v2
#        with:
#          context: src/${{ matrix.path }}
#          push: true
#          tags: vjv2143/kwetter.${{ matrix.path }}:latest
#
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
#
#  build-azure:
#    name: Build Docker image and push to ACR
#    if: ${{ github.ref == 'refs/heads/master' }}
#    runs-on: ubuntu-latest
#    needs: [ setup, test, sonar ]
#    strategy:
#      matrix:
#        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Login to Azure Container Registry
#        uses: azure/docker-login@v1
#        with:
#          login-server: kwetteracr.azurecr.io
#          username: ${{ secrets.ACR_USERNAME }}
#          password: ${{ secrets.ACR_PASSWORD }}
#
#      - name: Build and Push Image
#        run: |
#          docker build ./src/${{ matrix.path }} -t kwetteracr.azurecr.io/${{ matrix.path }}:latest
#          docker push kwetteracr.azurecr.io/${{ matrix.path }}:latest
#
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
