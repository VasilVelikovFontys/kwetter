name: Main

on:
  push:
    paths: 'src/**'

jobs:
  setup:
    name: Get Updated Paths
    runs-on: ubuntu-latest
    outputs:
      updated-paths: ${{ steps.generate-matrix.outputs.paths }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Generate Matrix
        id: generate-matrix
        run: |
          pathsArray=()

          for updatedFile in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          do
            if [[ $updatedFile == src\/* ]]
              then
              temporaryString=${updatedFile#*/}
              path=${temporaryString%/*}
              pathsArray+=(\"$path\")
            fi
          done

          separatedPaths=$(IFS=', '; echo "${pathsArray[*]}")

          echo {\"paths\":[$separatedPaths]}
          echo ::set-output name=paths::[$separatedPaths]

#  test:
#    name: Test with Jest
#    runs-on: ubuntu-latest
#    needs: setup
#    strategy:
#      fail-fast: false
#      matrix:
#        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
#    defaults:
#      run:
#        working-directory: 'src/${{ matrix.path }}'
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '12'
#          cache: 'npm'
#          cache-dependency-path: src/${{ matrix.path }}/package-lock.json
#
#      - name: Install dependencies with npm
#        run: npm install
#
#      - name: Run tests and generate coverage
#        run: npm run test:ci
#
#      - name: Fail job ðŸš¨
#        if: ${{ failure() }}
#        uses: actions/github-script@v6
#        env:
#          PATH: ${{ matrix.path }}
#        with:
#          script: |
#            const { PATH } = process.env
#
#            core.setFailed(`${PATH} tests have failed ðŸš¨`)
#
#      - name: Save successful test result âœ…
#        if: ${{ success() }}
#        uses: DamianReeves/write-file-action@v1.0
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/test-result.txt
#          contents: success
#          write-mode: append
#
#      - name: Save failed test result ðŸš¨
#        if: ${{ failure() }}
#        uses: DamianReeves/write-file-action@v1.0
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/test-result.txt
#          contents: failure
#          write-mode: append
#
#      - name: Create test result artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ matrix.path }}-tests
#          path: |
#            src/${{ matrix.path }}/coverage/lcov.info
#            src/${{ matrix.path }}/coverage/test-reporter.xml
#            src/${{ matrix.path }}/test-result.txt

#  sonar:
#    name: Scan With Sonarqube
#    runs-on: ubuntu-latest
#    needs: [ setup, test ]
#    strategy:
#      fail-fast: false
#      matrix:
#        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Download test result artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ matrix.path }}-tests
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/tests
#
#      - name: Read test result
#        id: read-tests
#        uses: juliangruber/read-file-action@v1
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/tests/test-result.txt
#
#      - name: Check test result
#        uses: actions/github-script@v6
#        env:
#          TEST_RESULT: ${{ steps.read-tests.outputs.content }}
#          PATH: ${{ matrix.path }}
#        with:
#          script: |
#            const { TEST_RESULT, PATH } = process.env
#
#            if (TEST_RESULT === 'failure') {
#              core.setFailed(`${PATH} tests have failed ðŸš¨`)
#            }
#
#      - name: Get Sonar Token Name
#        id: token
#        uses: ASzc/change-string-case-action@v2
#        with:
#          string: SONAR_TOKEN_${{ matrix.path }}
#
#      - name: Run Sonarqube scan
#        uses: sonarsource/sonarqube-scan-action@master
#        with:
#          projectBaseDir: src/${{ matrix.path }}
#          args: >
#            -Dsonar.projectKey=kwetter-${{ matrix.path }}
#            -Dsonar.sources=src
#            -Dsonar.tests=src
#            -Dsonar.test.inclusions=src/**/*.test.js
#            -Dsonar.testExecutionReportPaths=tests/coverage/test-reporter.xml
#            -Dsonar.javascript.lcov.reportPaths=tests/coverage/lcov.info
#        env:
#          SONAR_TOKEN: ${{ secrets[steps.token.outputs.uppercase] }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#      - name: Check Sonarqube quality gates
#        if: ${{ github.ref == 'refs/heads/dev' }}
#        uses: sonarsource/sonarqube-quality-gate-action@master
#        timeout-minutes: 5
#        with:
#          scanMetadataReportFile: ${{ github.workspace }}/src/${{ matrix.path }}/.scannerwork/report-task.txt
#        env:
#          SONAR_TOKEN: ${{ secrets[steps.token.outputs.uppercase] }}
#
#      - name: Save successful quality gates result âœ…
#        if: ${{ github.ref == 'refs/heads/master' && success() }}
#        uses: DamianReeves/write-file-action@v1.0
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/quality-gates-result.txt
#          contents: success
#          write-mode: append
#
#      - name: Save failed quality gates result ðŸš¨
#        if: ${{ github.ref == 'refs/heads/master' && failure() }}
#        uses: DamianReeves/write-file-action@v1.0
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/quality-gates-result.txt
#          contents: failure
#          write-mode: append
#
#      - name: Create quality gates result artifact
#        if: ${{ github.ref == 'refs/heads/master' }}
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ matrix.path }}-quality-gates
#          path: src/${{ matrix.path }}/quality-gates-result.txt

#  build-docker-hub:
#    name: Build Docker image and push to DockerHub
#    runs-on: ubuntu-latest
#    needs: [ setup, test ]
#    strategy:
#      fail-fast: false
#      matrix:
#        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Download test result artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ matrix.path }}-tests
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/tests
#
#      - name: Read test result
#        id: read-tests
#        uses: juliangruber/read-file-action@v1
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/tests/test-result.txt
#
#      - name: Check test result
#        uses: actions/github-script@v6
#        env:
#          TEST_RESULT: ${{ steps.read-tests.outputs.content }}
#          PATH: ${{ matrix.path }}
#        with:
#          script: |
#            const { TEST_RESULT, PATH } = process.env
#
#            if (TEST_RESULT === 'failure') {
#              core.setFailed(`${PATH} tests have failed ðŸš¨`)
#            }
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build image and push to Docker Hub
#        uses: docker/build-push-action@v2
#        with:
#          context: src/${{ matrix.path }}
#          push: true
#          tags: vjv2143/kwetter.${{ matrix.path }}:latest
#
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}

  build-azure-staging:
    name: Build staging Docker image and push to ACR
    #TODO change to master
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    #TODO add sonar
    #needs: [ setup, sonat ]
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Download quality gates result artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ matrix.path }}-quality-gates
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/quality-gates
#
#      - name: Read quality gates result
#        id: read-quality-gates
#        uses: juliangruber/read-file-action@v1
#        with:
#          path: ${{ github.workspace }}/src/${{ matrix.path }}/quality-gates/quality-gates-result.txt
#
#      - name: Check quality gates result
#        uses: actions/github-script@v6
#        env:
#          QUALITY_GATES_RESULT: ${{ steps.read-quality-gates.outputs.content }}
#          PATH: ${{ matrix.path }}
#        with:
#          script: |
#            const { QUALITY_GATES_RESULT, PATH } = process.env
#
#            if (QUALITY_GATES_RESULT === 'failure') {
#              core.setFailed(`${PATH} quality gates have failed ðŸš¨`)
#            }

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: kwetteracr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Image
        run: |
          docker build ./src/${{ matrix.path }} -t kwetteracr.azurecr.io/${{ matrix.path }}:staging
          docker push kwetteracr.azurecr.io/${{ matrix.path }}:staging

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  apply-staging:
    name: Apply Staging K8S Manifests
    #TODO change to master
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    needs: build-azure-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: kwetteracr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Apply manifests
        run: |
          cd src/infrastructure/kubernetes/staging
          kubectl apply -f . --namespace staging

  performance-test:
    name: Test Performance
    #TODO change to master
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    needs: apply-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  build-azure-production:
    name: Build production Docker image and push to ACR
    #TODO change to master
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    needs: [ setup, performance-test ]
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.setup.outputs.updated-paths) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: kwetteracr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Image
        run: |
          docker build ./src/${{ matrix.path }} -t kwetteracr.azurecr.io/${{ matrix.path }}:production
          docker push kwetteracr.azurecr.io/${{ matrix.path }}:production

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  apply-production:
    name: Apply Production K8S Manifests
    #TODO change to master
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    needs: build-azure-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: kwetteracr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Apply manifests
        run: |
          cd src/infrastructure/kubernetes/production
          kubectl apply -f . --namespace production
